var path = require("path");
var fs = require("fs");
var expDir = path.join(__dirname, "../exp");
var shedDir = path.join(__dirname, "../shed");

var shedCfgMap = {};

function strToIntArr(str){
    var arr = str.split(",");
    var results = [];
    for(var i = 0; i < arr.length; ++i){
        var v = arr[i];
        v = v.trim();
        if(v == "") v = 0;
        else v = parseInt(v);
        results.push(v)
    }
    return results;
}
exports.getShedCfgByFile = function(cfgFile){
    if(shedCfgMap[cfgFile]) return shedCfgMap[cfgFile];
    var cfg = require(path.join(shedDir, cfgFile));
    cfg.lengths = strToIntArr(cfg.lengths);
    cfg.topScrolls = strToIntArr(cfg.topScrolls);
    cfg.edgeScrolls = strToIntArr(cfg.edgeScrolls);
    cfg.frontScrolls = strToIntArr(cfg.frontScrolls);
    shedCfgMap[cfgFile] = cfg;
    return cfg;
};

exports.runExpFile = function(expFile, shedCfg){
    var filePath = path.join(expDir, expFile);//获取公式文件路径
    var content = fs.readFileSync(filePath);//获取文件内容
    try{
        var func = eval('(' + content + ')');
    }catch(e){
        console.error("公式计算发生了错误！");
        console.error(e);
        return 0;
    }
    var result =  func(shedCfg.lengths, shedCfg.topScrolls, shedCfg.edgeScrolls, shedCfg.frontScrolls, shedCfg.args);
    result *= shedCfg.count;
    return result;
};
//console.log("测试runExpFile方法：", exports.runExpFile("M架组、V架组通用计算公式.js", exports.getShedCfgByFile("8m棚_测试配置1.js")));
exports.testExpWithAllCfg = function(expFileName){
    console.log("+++++++++++++++++++公式【%s】测试 开始++++++++++++++++++++", expFileName);
    var files = fs.readdirSync(shedDir);
    for(var i = 0; i < files.length; ++i){
        var cfg = exports.getShedCfgByFile(files[i]);
        console.log("大棚配置【%s】测试如下：", files[i]);
        console.log("   棚长：      ", cfg.lengths);
        console.log("   顶卷膜：    ", cfg.topScrolls);
        console.log("   侧卷膜：    ", cfg.edgeScrolls);
        console.log("   前后卷膜：  ", cfg.frontScrolls);
        console.log("   计算结果：  ", exports.runExpFile(expFileName, cfg));
    }
    console.log("+++++++++++++++++++公式【%s】测试 结束++++++++++++++++++++", expFileName);
};
//exports.testExpWithAllCfg("卡槽连接片通用计算公式.js");

exports.outputTestResults = function(){
    var outFilePath = path.join(__dirname, "../公式测算结果.txt");
    var content = "";
    var expFiles = fs.readdirSync(expDir);
    for(var i = 0; i < expFiles.length; ++i){
        var expFileName = expFiles[i];
        content += "+++++++++++++++++++公式【" + expFileName + "】测试 开始++++++++++++++++++++\r\n";
        var files = fs.readdirSync(shedDir);
        files = ["8m棚_测试配置1.js"];
        for(var j = 0; j < files.length; ++j){
            var cfgFileName = files[j];
            var baseName = path.basename(cfgFileName, ".js");
            var cfg = exports.getShedCfgByFile(cfgFileName);
            content += "大棚配置【" + baseName + "】测试如下：\r\n";
            content += "   棚长(米)：  " + cfg.lengths + "\r\n";
            content += "   顶卷膜：    " + cfg.topScrolls + "\r\n";
            content += "   侧卷膜：    " + cfg.edgeScrolls + "\r\n";
            content += "   前后卷膜：  " + cfg.frontScrolls + "\r\n";
            content += "   计算结果：  " + exports.runExpFile(expFileName, cfg) + "\r\n";
        }
        content += "+++++++++++++++++++公式【" + expFileName + "】测试 结束++++++++++++++++++++\r\n\r\n\r\n";
    }
    fs.writeFileSync(outFilePath, content);
};
exports.outputTestResults();