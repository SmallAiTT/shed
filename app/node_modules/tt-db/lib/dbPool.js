var _poolModule = require('generic-pool');
var queues = require('mysql-queues');
const DEBUG = true;
var format = require("mysql").format;
var dbUtils = require("./dbUtils.js");
var domain = require("domain");

/**
 * Desc: 数据库Query的格式化。注意，自定义的只有三个参数。
 * @param sql
 * @param values
 * @param timeZone
 * @returns {*}
 */
function queryFormat (sql, values, timeZone) {
    if(sql.search(/\:(\w+)/) >= 0){
        return sql.replace(/\:(\w+)/g, function (txt, key) {
            if (values.hasOwnProperty(key)) return this.escape(values[key]);
            return txt;
        }.bind(this));
    }
    return format(sql, values, false, timeZone);
}
/*
 * Create mysql connection pool.
 */
var create = function(cnnCfg) {
    return _poolModule.Pool({
        name: cnnCfg.name || 'mysql',
        create: function(callback) {
            var mysql = require(cnnCfg.dbModule || 'mysql');
            var client = mysql.createConnection({
                host: cnnCfg.host,
                user: cnnCfg.user,
                password: cnnCfg.password,
                database: cnnCfg.database,
                queryFormat : queryFormat,
                debug : cnnCfg.debug || false
            });
            queues(client, DEBUG);
            callback(null, client);
        },
        destroy: function(client) {
            client.destroy();
        },
        max: 10,
        idleTimeoutMillis : 30000,
        log : false
    });
};

exports.create = create;
exports.startTrans = function(pool, cb){
    pool.acquire(function(err, client){
        if(err) return cb(err);
        var ts = null;
        try{
            ts = client.startTransaction();
            dbUtils.initDbOper(ts);
            cb(null, ts);

            //异常处理
            var d = domain.create();
            d.on("error", function(err){
                ts && ts.rollback && ts.rollback();
                pool.release(client);
                cb(err);
            });
            d.add(ts);
            d.add(client);
            d.run(function(){
                ts.execute();
            });
        }catch(e){
            ts && ts.rollback && ts.rollback();
            pool.release(client);
            return cb(e);
        }
    });
}