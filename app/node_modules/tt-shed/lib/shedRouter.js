var express = require("express");
var router = module.exports = express.Router();
var async = require("async");

function getCompByReq(req){
    var body = req.body;
    return {
        id : body.id,
        code : body.code,
        name : body.name,
        isBase : body.isBase,
        img : body.img,
        spec : body.spec,
        mates : body.mates,
        unit : body.unit,
        remark : body.remark
    }
}

//++++++++++++++++++++++shed 开始+++++++++++++++++++++++++++++++++
//++++++++++++++++++++++shed 结束+++++++++++++++++++++++++++++++++

//++++++++++++++++++++++proj 开始+++++++++++++++++++++++++++++++++
router.get("/shed/proj_mgr", function(req, res){
    res.render("shed/proj_mgr");
});
function getProjByReq(req){
    var body = req.body;
    return {
        id : body.id,
        name : body.name,
        state : body.state,
        remark : body.remark
    }
}
router.post("/shed/proj/list", function(req, res, next){
    req.dbClient.pageGridByReq("proj", {_orderBy : ["name"]}, req, {}, function(err, data){
        if(err) return next(err);
        res.send(data);
    })
});
router.post("/shed/proj/create", function(req, res, next){
    var proj = getProjByReq(req);
    proj.state = proj.state || "000";
    req.dbClient.insert("proj", proj, function(err){
        if(err) return next(err);
        res.success();
    });
});
router.post("/shed/proj/update", function(req, res, next){
    var proj = getProjByReq(req);
    req.dbClient.select("proj", {id : proj.id}, function(err, proj){
        if(err) return next(err);
        if(proj.state == "001") return res.error("已经完成的项目不可编辑！");

        req.dbClient.update("proj",proj , {id : proj.id}, function(err1){
            if(err1) return next(err1);
            res.success();
        });
    });
});
router.post("/shed/proj/delete", function(req, res, next){
    var proj = getProjByReq(req);
    req.dbClient.select("proj", {id : proj.id}, function(err, proj){
        if(err) return next(err);
        if(proj.state == "001") return res.error("已经完成的项目不可删除！");

        req.dbClient.del("proj", {id : proj.id}, function(err1){
            if(err1) return next(err1);
            res.success();
        });
    });
});
router.post("/shed/proj/finish", function(req, res, next){
    var proj = getProjByReq(req);
    req.dbClient.update("proj",{state : "001"} , {id : proj.id}, function(err){
        if(err) return next(err);
        res.success();
    });
});
router.post("/shed/proj/calComp", function(req, res, next){
    var projId = req.body.id;
    req.dbClient.query("shed", {projId : projId}, function(err, sheds){
        calShedComps(req.dbClient, sheds, function(err1, results){
            if(err1) return next(err1);
            res.send(results);
        });
    });
});
//++++++++++++++++++++++proj 结束+++++++++++++++++++++++++++++++++

//++++++++++++++++++++++exp 开始+++++++++++++++++++++++++++++++++
function getExpByReq(req){
    var body = req.body;
    return {
        id : body.id,
        name : body.name,
        exp : body.exp,
        remark : body.remark
    }
};
router.get("/shed/exp_mgr", function(req, res){
    res.render("shed/exp_mgr");
});
router.post("/shed/exp/list", function(req, res, next){
    req.dbClient.pageGridByReq("exp", {_orderBy : ["name"]}, req, {name:"=?"}, function(err, data){
        if(err) return next(err);
        res.send(data);
    })
});
//新增零件
router.post("/shed/exp/create", function(req, res, next){
    var exp = getExpByReq(req);
    req.dbClient.insert("exp", exp, function(err){
        if(err) return next(err);
        res.success();
    });
});
//修改零件
router.post("/shed/exp/update", function(req, res, next){
    var exp = getExpByReq(req);
    req.dbClient.update("exp",exp , {id : exp.id}, function(err){
        if(err) return next(err);
        res.success();
    });
});
//删除零件
router.post("/shed/exp/delete", function(req, res, next){
    var id = req.body.id;
    //TODO 这里需已经关联的公式进行判断，如果已经进行关联了，就不能删除。
    req.dbClient.del("exp", {id : id}, function(err1){//再删除零件本身
        if(err1) return next(err1);
        res.success();
    });
});
//++++++++++++++++++++++exp 结束+++++++++++++++++++++++++++++++++

//++++++++++++++++++++++sche 开始+++++++++++++++++++++++++++++++++
function getScheByReq(req){
    var body = req.body;
    return {
        id : body.id,
        name : body.name,
        remark : body.remark
    }
};
router.get("/shed/sche_mgr", function(req, res){
    res.render("shed/sche_mgr");
});
router.post("/shed/sche/list", function(req, res, next){
    req.dbClient.pageGridByReq("sche", {_orderBy : ["name"]}, req, {name:"=?"}, function(err, data){
        if(err) return next(err);
        res.send(data);
    })
});
//新增零件
router.post("/shed/sche/create", function(req, res, next){
    var sche = getScheByReq(req);
    req.dbClient.insert("sche", sche, function(err){
        if(err) return next(err);
        res.success();
    });
});
//修改零件
router.post("/shed/sche/update", function(req, res, next){
    var sche = getScheByReq(req);
    req.dbClient.update("sche",sche , {id : sche.id}, function(err){
        if(err) return next(err);
        res.success();
    });
});
//删除零件
router.post("/shed/sche/delete", function(req, res, next){
    var id = req.body.id;
    //TODO 这里需已经关联的公式进行判断，如果已经进行关联了，就不能删除。
    req.dbClient.del("sche", {id : id}, function(err1){//再删除零件本身
        if(err1) return next(err1);
        res.success();
    });
});

//删除零件
router.post("/shed/sche/test", function(req, res, next){
    var id = req.body.id;
    var shed = getShedByReq(req);
    shed.scheId = id;//设置方案id
    shed.count = 1;//设置成一个
    calShedComps(req.dbClient, shed, function(err, results){
        if(err) return next(err);
        res.send(results);
    });
});

function getCompInfo(client, scheId, cb){
    var expSqlStr = "select ce.*, e.exp, c.isBase from exp e, compexp ce, comp c where c.id = ce.compId and e.id = ce.expId and c.scheId = ? order by c.seq";
    var compDtlSqlStr = "select * form compDtl where id in (select c.compId from exp e, compexp c where e.id = c.expId and c.scheId = ?";
    async.parallel([
        function(cb1){client.query(expSqlStr, [scheId], cb1)},
        function(cb1){client.query(compDtlSqlStr, [scheId], cb1)}
    ], function(err, results){
        if(err) return cb(err);
        var data1 = results[1];
        var compDtlMap = {};
        for(var i = 0; i < data1.length; ++i){
            var d = data1[i];
            var arr = compDtlMap[d.id];
            if(!arr) {
                arr = compDtlMap[d.id] = [];
                arr.push(d);
            }
        }
        cb(null, results[0], compDtlMap);
    })
}

function calShedComps(client, shed, cb){
    var sqlStr = "select e.exp, c.* from exp e, compexp c where e.id = c.expId and c.scheId = 1 order by c.seq";
    var result = {};
    var compMap = {};//零件映射

    client.query(sqlStr, [shed.scheId], function(err, expList){
        if(err) return cb(err);
        var compStr = "(";
        for(var i = 0; i < expList.length; ++i){
            compStr += expList[i].compId;
            if(i < expList.length - 1) compStr += ",";
        }
        compStr += ")";
        client.list("comp", "id in " + compStr, [], function(err1, compList){
            for(var i = 0; i < compList.length; ++i){
                if(!compMap[compList[i].id]) compMap[compList[i].id] = compList[i]
            }
            try{
                for(var i = 0; i < expList.length; ++i){
                    var compId = expList[i].compId;
                    var exp = eval('(' + expList[i].exp + ')');
                    result[compId] = (result[compId] || 0) + shed.count * exp(shed.lengths, shed.topScrolls, shed.edgeScrolls, shed.frontScrolls);
                }
            }catch(e){
                return cb(e);
            }

            if(err) return cb(err);
            var results = [];
            for (var compId in result) {
                var comp = compMap[compId];
                comp.count = result[compId];
                results.push(comp);
            }
            cb(null, results);
        });
    });
}

//++++++++++++++++++++++sche 结束+++++++++++++++++++++++++++++++++


//++++++++++++++++++++++compExp 开始+++++++++++++++++++++++++++++++++
function getCompExpByReq(req){
    var body = req.body;
    return {
        id : body.id,
        scheId : body.scheId,
        compId : body.compId,
        expId : body.expId,
        seq : body.seq,
        args : body.args,
        remark : body.remark
    }
};
router.post("/shed/compExp/list", function(req, res, next){
    var scheId = req.body.scheId;
    var sqlStr = "select a.*, b.name scheName, c.name compName from compexp a, sche b, comp c where a.scheId = ? and a.scheId = b.id and a.compId = c.id order by a.seq";
    req.dbClient.pageGridSqlByReq(sqlStr, [scheId], req, {seq:"=?"}, function(err, data){
        if(err) return next(err);
        res.send(data);
    })
});
//新增零件
router.post("/shed/compExp/create", function(req, res, next){
    var compExp = getCompExpByReq(req);
    req.dbClient.insert("compExp", compExp, function(err){
        if(err) return next(err);
        res.success();
    });
});
//修改零件
router.post("/shed/compExp/update", function(req, res, next){
    var compExp = getCompExpByReq(req);
    req.dbClient.update("compExp",compExp , {id : compExp.id}, function(err){
        if(err) return next(err);
        res.success();
    });
});
//删除零件
router.post("/shed/compExp/delete", function(req, res, next){
    var id = req.body.id;
    //TODO 这里需已经关联的公式进行判断，如果已经进行关联了，就不能删除。
    req.dbClient.del("compExp", {id : id}, function(err1){//再删除零件本身
        if(err1) return next(err1);
        res.success();
    });
});
//++++++++++++++++++++++compExp 结束+++++++++++++++++++++++++++++++++


//++++++++++++++++++++++comp 开始+++++++++++++++++++++++++++++++++
//零件管理界面链接
router.get("/shed/comp_mgr", function(req, res){
    res.render("shed/comp_mgr");
});
//零件列表
router.post("/shed/comp/list", function(req, res, next){
    req.dbClient.pageGridByReq("comp", {_orderBy : ["code", "name"]}, req, {code:"=?"}, function(err, data){
        if(err) return next(err);
        res.send(data);
    })
});
//新增零件
router.post("/shed/comp/create", function(req, res, next){
    var comp = getCompByReq(req);
    req.dbClient.insert("comp", comp, function(err){
        if(err) return next(err);
        res.success();
    });
});
//修改零件
router.post("/shed/comp/update", function(req, res, next){
    var comp = getCompByReq(req);
    req.dbClient.update("comp",comp , {id : comp.id}, function(err){
        if(err) return next(err);
        res.success();
    });
});
//删除零件
router.post("/shed/comp/delete", function(req, res, next){
    var id = req.body.id;
    req.dbClient.del("compDtl", "id = ? or childId = ?", [id, id], function(err){//先删除子零件相关
        if(err) return next(err);
        req.dbClient.del("comp", {id : id}, function(err1){//再删除零件本身
            if(err1) return next(err1);
            res.success();
        });
    });
});
//子零件列表
router.post("/shed/comp/children", function(req, res, next){
    var parentId = req.body.parentId;
    var sql = "select a.parentId, a.count, b.* from (select id parentId, childId, count from compDtl where id = ?) a left join comp b on a.childId = b.id ";
    req.dbClient.pageGridSqlByReq(sql, [parentId], req, {code:"=?"}, function(err, data){
        if(err) return next(err);
        res.send(data);
    })
});
//绑定子零件时的零件列表
router.post("/shed/comp/compToBeSelected", function(req, res, next){
    var parentId = req.body.parentId;
    var currChildId = req.body.currChildId;
    var sql = "select * from comp where id != ? and isBase = 1 and id not in (select childId id from compdtl where id = ? ) order by code, name";
    req.dbClient.pageGridSqlByReq(sql, [parentId, currChildId], req, {code:"=?"}, function(err, data){
        if(err) return next(err);
        res.send(data);
    })
});
//绑定子零件时的零件列表
router.post("/shed/comp/compToBeSelected", function(req, res, next){
    var parentId = req.body.parentId;
    var currChildId = req.body.currChildId;
    var sql = "select * from comp where id != ? and isBase = 1 and id not in (select childId id from compdtl where id = ? ) order by code, name";
    req.dbClient.pageGridSqlByReq(sql, [parentId, currChildId], req, {code:"=?"}, function(err, data){
        if(err) return next(err);
        res.send(data);
    })
});
function getCompDtlByReq(req){
    var body = req.body;
    return {
        id : body.parentId,
        childId : body.id,
        count : body.count
    }
}
//添加子零件
router.post("/shed/comp/addChild", function(req, res, next){
    var compDtl = getCompDtlByReq(req);
    req.dbClient.insert("compDtl", compDtl, function(err){
        if(err) return next(err);
        res.success();
    })
});
//修改子零件
router.post("/shed/comp/updateChild", function(req, res, next){
    var body = req.body;
    var value = {childId : body.id, count : body.count};
    var cnd = {id : body.parentId, childId : body.oldId};
    req.dbClient.update("compDtl", value, cnd, function(err){
        if(err) return next(err);
        res.success();
    })
});
//删除子零件
router.post("/shed/comp/deleteChild", function(req, res, next){
    var body = req.body;
    req.dbClient.del("compDtl", {id : body.parentId, childId : body.id}, function(err){
        if(err) return next(err);
        res.success();
    })
});
//++++++++++++++++++++++comp 结束+++++++++++++++++++++++++++++++++


//++++++++++++++++++++++shed 开始++++++++++++++++++++++++++++++++++
function getShedByReq(req){
    var body = req.body;
    return {
        id : body.id,
        name : body.name,
        projId : body.projId,
        scheId : body.scheId,
        num : body.num,
        lengths : body.lengths,
        topScrolls : body.topScrolls,
        edgeScrolls : body.edgeScrolls,
        frontScrolls : body.frontScrolls,
        remark : body.remark
    }
}
router.post("/shed/shed/list", function(req, res, next){
    var projId = req.body.projId;
    var sqlStr = "select shed.*, sche.name scheName from shed, sche where shed.scheId = sche.id and projId = ? order by name";
    req.dbClient.pageGridSqlByReq(sqlStr, [projId], req, {}, function(err, data){
        if(err) return next(err);
        res.send(data);
    })
});
router.post("/shed/shed/create", function(req, res, next){
    var shed = getShedByReq(req);
    req.dbClient.select("proj", {id : shed.projId}, function(err, proj){
        if(err) return next(err);
        if(proj.state == "001") return res.error("已经完成的项目不能新增大棚！");

        req.dbClient.insert("shed", shed, function(err){
            if(err) return next(err);
            res.success();
        })
    });
});
router.post("/shed/shed/update", function(req, res, next){
    var shed = getShedByReq(req);
    req.dbClient.select("proj", {id : shed.projId}, function(err, proj){
        if(err) return next(err);
        if(proj.state == "001") return res.error("已经完成的项目不能修改大棚！");

        req.dbClient.update("shed", shed, {id : shed.id}, function(err){
            if(err) return next(err);
            res.success();
        })
    });
});
router.post("/shed/shed/delete", function(req, res, next){
    var shed = getShedByReq(req);
    req.dbClient.select("proj", {id : shed.projId}, function(err, proj){
        if(err) return next(err);
        if(proj.state == "001") return res.error("已经完成的项目不能删除大棚！");

        req.dbClient.del("shed", {id : shed.id}, function(err){
            if(err) return next(err);
            res.success();
        });
    });
});

router.post("/shed/shed/calComp", function(req, res, next){
    var id = req.body.id;
    req.dbClient.select("shed", {id:id}, function(err, shed){
        if(err) return next(err);
        if(!shed) return next("找不到shed数据，请检查！");
        calShedComps(req.dbClient, shed, function(err, results){
            if(err) return next(err);
            res.send(results);
        });
    });
});
//++++++++++++++++++++++shed 结束++++++++++++++++++++++++++++++++++