var express = require("express");
var router = module.exports = express.Router();

function getCompByReq(req){
    var body = req.body;
    return {
        id : body.id,
        code : body.code,
        name : body.name,
        isBase : body.isBase,
        img : body.img,
        spec : body.spec,
        mates : body.mates,
        unit : body.unit,
        remark : body.remark
    }
}

//++++++++++++++++++++++shed 开始+++++++++++++++++++++++++++++++++
//++++++++++++++++++++++shed 结束+++++++++++++++++++++++++++++++++

//++++++++++++++++++++++proj 开始+++++++++++++++++++++++++++++++++
router.get("/shed/proj_mgr", function(req, res){
    res.render("shed/proj_mgr");
});
function getProjByReq(req){
    var body = req.body;
    return {
        id : body.id,
        name : body.name,
        state : body.state,
        remark : body.remark
    }
}
router.post("/shed/proj/list", function(req, res, next){
    req.dbClient.pageGridByReq("proj", {_orderBy : ["name"]}, req, {}, function(err, data){
        if(err) return next(err);
        res.send(data);
    })
});
router.post("/shed/proj/create", function(req, res, next){
    var proj = getProjByReq(req);
    proj.state = proj.state || "000";
    req.dbClient.insert("proj", proj, function(err){
        if(err) return next(err);
        res.success();
    });
});
router.post("/shed/proj/update", function(req, res, next){
    var proj = getProjByReq(req);
    req.dbClient.select("proj", {id : proj.id}, function(err, proj){
        if(err) return next(err);
        if(proj.state == "001") return res.error("已经完成的项目不可编辑！");

        req.dbClient.update("proj",proj , {id : proj.id}, function(err1){
            if(err1) return next(err1);
            res.success();
        });
    });
});
router.post("/shed/proj/delete", function(req, res, next){
    var proj = getProjByReq(req);
    req.dbClient.select("proj", {id : proj.id}, function(err, proj){
        if(err) return next(err);
        if(proj.state == "001") return res.error("已经完成的项目不可删除！");

        req.dbClient.del("proj", {id : proj.id}, function(err1){
            if(err1) return next(err1);
            res.success();
        });
    });
});
router.post("/shed/proj/finish", function(req, res, next){
    var proj = getProjByReq(req);
    req.dbClient.update("proj",{state : "001"} , {id : proj.id}, function(err){
        if(err) return next(err);
        res.success();
    });
});
router.post("/shed/proj/calComp", function(req, res, next){
    res.send([]);//TODO
});
//++++++++++++++++++++++proj 结束+++++++++++++++++++++++++++++++++

//++++++++++++++++++++++exp 开始+++++++++++++++++++++++++++++++++
function getExpByReq(req){
    var body = req.body;
    return {
        id : body.id,
        name : body.name,
        exp : body.exp,
        remark : body.remark
    }
};
router.get("/shed/exp_mgr", function(req, res){
    res.render("shed/exp_mgr");
});
router.post("/shed/exp/list", function(req, res, next){
    req.dbClient.pageGridByReq("exp", {_orderBy : ["name"]}, req, {name:"=?"}, function(err, data){
        if(err) return next(err);
        res.send(data);
    })
});
//新增零件
router.post("/shed/exp/create", function(req, res, next){
    var exp = getExpByReq(req);
    req.dbClient.insert("exp", exp, function(err){
        if(err) return next(err);
        res.success();
    });
});
//修改零件
router.post("/shed/exp/update", function(req, res, next){
    var exp = getExpByReq(req);
    req.dbClient.update("exp",exp , {id : exp.id}, function(err){
        if(err) return next(err);
        res.success();
    });
});
//删除零件
router.post("/shed/exp/delete", function(req, res, next){
    var id = req.body.id;
    //TODO 这里需已经关联的公式进行判断，如果已经进行关联了，就不能删除。
    req.dbClient.del("exp", {id : id}, function(err1){//再删除零件本身
        if(err1) return next(err1);
        res.success();
    });
});
//++++++++++++++++++++++exp 结束+++++++++++++++++++++++++++++++++

//++++++++++++++++++++++sche 开始+++++++++++++++++++++++++++++++++
function getScheByReq(req){
    var body = req.body;
    return {
        id : body.id,
        name : body.name,
        remark : body.remark
    }
};
router.get("/shed/sche_mgr", function(req, res){
    res.render("shed/sche_mgr");
});
router.post("/shed/sche/list", function(req, res, next){
    req.dbClient.pageGridByReq("sche", {_orderBy : ["name"]}, req, {name:"=?"}, function(err, data){
        if(err) return next(err);
        res.send(data);
    })
});
//新增零件
router.post("/shed/sche/create", function(req, res, next){
    var sche = getScheByReq(req);
    req.dbClient.insert("sche", sche, function(err){
        if(err) return next(err);
        res.success();
    });
});
//修改零件
router.post("/shed/sche/update", function(req, res, next){
    var sche = getScheByReq(req);
    req.dbClient.update("sche",sche , {id : sche.id}, function(err){
        if(err) return next(err);
        res.success();
    });
});
//删除零件
router.post("/shed/sche/delete", function(req, res, next){
    var id = req.body.id;
    //TODO 这里需已经关联的公式进行判断，如果已经进行关联了，就不能删除。
    req.dbClient.del("sche", {id : id}, function(err1){//再删除零件本身
        if(err1) return next(err1);
        res.success();
    });
});

//++++++++++++++++++++++sche 结束+++++++++++++++++++++++++++++++++


//++++++++++++++++++++++compExp 开始+++++++++++++++++++++++++++++++++
function getCompExpByReq(req){
    var body = req.body;
    return {
        id : body.id,
        scheId : body.scheId,
        compId : body.compId,
        expId : body.expId,
        seq : body.seq,
        args : body.args,
        remark : body.remark
    }
};
router.post("/shed/compExp/list", function(req, res, next){
    var scheId = req.body.scheId;
    var sqlStr = "select a.*, b.name scheName, c.name compName from compexp a, sche b, comp c where a.scheId = ? and a.scheId = b.id and a.compId = c.id order by a.seq";
    req.dbClient.pageGridSqlByReq(sqlStr, [scheId], req, {seq:"=?"}, function(err, data){
        if(err) return next(err);
        res.send(data);
    })
});
//新增零件
router.post("/shed/compExp/create", function(req, res, next){
    var compExp = getCompExpByReq(req);
    req.dbClient.insert("compExp", compExp, function(err){
        if(err) return next(err);
        res.success();
    });
});
//修改零件
router.post("/shed/compExp/update", function(req, res, next){
    var compExp = getCompExpByReq(req);
    req.dbClient.update("compExp",compExp , {id : compExp.id}, function(err){
        if(err) return next(err);
        res.success();
    });
});
//删除零件
router.post("/shed/compExp/delete", function(req, res, next){
    var id = req.body.id;
    //TODO 这里需已经关联的公式进行判断，如果已经进行关联了，就不能删除。
    req.dbClient.del("compExp", {id : id}, function(err1){//再删除零件本身
        if(err1) return next(err1);
        res.success();
    });
});
//++++++++++++++++++++++compExp 结束+++++++++++++++++++++++++++++++++


//++++++++++++++++++++++comp 开始+++++++++++++++++++++++++++++++++
//零件管理界面链接
router.get("/shed/comp_mgr", function(req, res){
    res.render("shed/comp_mgr");
});
//零件列表
router.post("/shed/comp/list", function(req, res, next){
    req.dbClient.pageGridByReq("comp", {_orderBy : ["code", "name"]}, req, {code:"=?"}, function(err, data){
        if(err) return next(err);
        res.send(data);
    })
});
//新增零件
router.post("/shed/comp/create", function(req, res, next){
    var comp = getCompByReq(req);
    req.dbClient.insert("comp", comp, function(err){
        if(err) return next(err);
        res.success();
    });
});
//修改零件
router.post("/shed/comp/update", function(req, res, next){
    var comp = getCompByReq(req);
    req.dbClient.update("comp",comp , {id : comp.id}, function(err){
        if(err) return next(err);
        res.success();
    });
});
//删除零件
router.post("/shed/comp/delete", function(req, res, next){
    var id = req.body.id;
    req.dbClient.del("compDtl", "id = ? or childId = ?", [id, id], function(err){//先删除子零件相关
        if(err) return next(err);
        req.dbClient.del("comp", {id : id}, function(err1){//再删除零件本身
            if(err1) return next(err1);
            res.success();
        });
    });
});
//子零件列表
router.post("/shed/comp/children", function(req, res, next){
    var parentId = req.body.parentId;
    var sql = "select a.parentId, a.count, b.* from (select id parentId, childId, count from compDtl where id = ?) a left join comp b on a.childId = b.id ";
    req.dbClient.pageGridSqlByReq(sql, [parentId], req, {code:"=?"}, function(err, data){
        if(err) return next(err);
        res.send(data);
    })
});
//绑定子零件时的零件列表
router.post("/shed/comp/compToBeSelected", function(req, res, next){
    var parentId = req.body.parentId;
    var currChildId = req.body.currChildId;
    var sql = "select * from comp where id != ? and isBase = 1 and id not in (select childId id from compdtl where id = ? ) order by code, name";
    req.dbClient.pageGridSqlByReq(sql, [parentId, currChildId], req, {code:"=?"}, function(err, data){
        if(err) return next(err);
        res.send(data);
    })
});
//绑定子零件时的零件列表
router.post("/shed/comp/compToBeSelected", function(req, res, next){
    var parentId = req.body.parentId;
    var currChildId = req.body.currChildId;
    var sql = "select * from comp where id != ? and isBase = 1 and id not in (select childId id from compdtl where id = ? ) order by code, name";
    req.dbClient.pageGridSqlByReq(sql, [parentId, currChildId], req, {code:"=?"}, function(err, data){
        if(err) return next(err);
        res.send(data);
    })
});
function getCompDtlByReq(req){
    var body = req.body;
    return {
        id : body.parentId,
        childId : body.id,
        count : body.count
    }
}
//添加子零件
router.post("/shed/comp/addChild", function(req, res, next){
    var compDtl = getCompDtlByReq(req);
    req.dbClient.insert("compDtl", compDtl, function(err){
        if(err) return next(err);
        res.success();
    })
});
//修改子零件
router.post("/shed/comp/updateChild", function(req, res, next){
    var body = req.body;
    var value = {childId : body.id, count : body.count};
    var cnd = {id : body.parentId, childId : body.oldId};
    req.dbClient.update("compDtl", value, cnd, function(err){
        if(err) return next(err);
        res.success();
    })
});
//删除子零件
router.post("/shed/comp/deleteChild", function(req, res, next){
    var body = req.body;
    req.dbClient.del("compDtl", {id : body.parentId, childId : body.id}, function(err){
        if(err) return next(err);
        res.success();
    })
});
//++++++++++++++++++++++comp 结束+++++++++++++++++++++++++++++++++


//++++++++++++++++++++++shed 开始++++++++++++++++++++++++++++++++++
function getShedByReq(req){
    var body = req.body;
    return {
        id : body.id,
        name : body.name,
        projId : body.projId,
        scheId : body.scheId,
        lengths : body.lengths,
        topScrolls : body.topScrolls,
        edgeScrolls : body.edgeScrolls,
        frontScrolls : body.frontScrolls,
        remark : body.remark
    }
}
router.post("/shed/shed/list", function(req, res, next){
    var projId = req.body.projId;
    req.dbClient.pageGridByReq("shed", {projId : projId, _orderBy : ["name"]}, req, {}, function(err, data){
        if(err) return next(err);
        res.send(data);
    })
});
router.post("/shed/shed/create", function(req, res, next){
    var shed = getShedByReq(req);
    req.dbClient.select("proj", {id : shed.projId}, function(err, proj){
        if(err) return next(err);
        if(proj.state == "001") return res.error("已经完成的项目不能新增大棚！");

        req.dbClient.insert("shed", shed, function(err){
            if(err) return next(err);
            res.success();
        })
    });
});
router.post("/shed/shed/update", function(req, res, next){
    var shed = getShedByReq(req);
    req.dbClient.select("proj", {id : shed.projId}, function(err, proj){
        if(err) return next(err);
        if(proj.state == "001") return res.error("已经完成的项目不能修改大棚！");

        req.dbClient.update("shed", shed, {id : shed.id}, function(err){
            if(err) return next(err);
            res.success();
        })
    });
});
router.post("/shed/shed/delete", function(req, res, next){
    var shed = getShedByReq(req);
    req.dbClient.select("proj", {id : shed.projId}, function(err, proj){
        if(err) return next(err);
        if(proj.state == "001") return res.error("已经完成的项目不能删除大棚！");

        req.dbClient.del("shed", {id : shed.id}, function(err){
            if(err) return next(err);
            res.success();
        });
    });
});

router.post("/shed/shed/calComp", function(req, res, next){
    res.send([]);//TODO
});
//++++++++++++++++++++++shed 结束++++++++++++++++++++++++++++++++++